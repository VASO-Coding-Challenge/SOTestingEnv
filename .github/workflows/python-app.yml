# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # - name: Set up Python 3.10
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: "3.10"

      # - name: Set up Python 3.12
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: "3.12"

      - name: Get Python version from code
        id: python_version
        run: |
          python_version=$(python3 --version | awk '{print $2}')
          echo "Detected Python version: $python_version"
          echo "::set-output name=python_version::$python_version"

      - name: Set up Python version
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.python_version.outputs.python_version }}

      # - name: Install minimal dependencies and discover imports
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install flake8 pytest pytest-cov
      #     # Install common backend packages
      #     pip install fastapi httpx pydantic

      #     # Find all Python imports
      #     echo "Analyzing imports:"
      #     grep -r "^import\|^from" backend/ --include="*.py" | sort | uniq
      # - name: Try running tests and install missing packages
      #   run: |
      #     cd backend
      #     # Try running tests and capture output
      #     python -m pytest test/ -v || echo "Tests failed on first attempt - will install more packages"
      # - name: Install additional dependencies based on errors
      #   run: |
      #     pip install <add>

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          # Install testing packages
          pip install flake8 pytest pytest-cov
          # Install packages from test imports
          pip install sqlmodel pyjwt fastapi polars httpx
          # # Make the backend package installable
          # cd backend
          # pip install -e .

      # Ignore syntax checking for now
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest and coverage
        run: |
          cd backend
          pytest --cov=. --cov-fail-under=88 test/
        # pytest --cov=. --cov-fail-under=90 test/
